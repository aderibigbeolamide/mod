import PropertyController, { propertyProps } from "../controllers/property.controller.js";
import Utility from "../../../utils/utility.js";
import { TransactionTypes } from "../enums/transaction.types.enums.js";
import SearchService from "../services/search.service.js";
import {
  PropertyArchiveUpdateDto,
  PropertyAvailabilityUpdateDto,
  PropertyCautionFeeUpdateDto,
  PropertyFAQDto,
  PropertyInitiateDto,
  PropertyLeasePolicyUpdateDto,
  PropertySearchQueryDto,
  PropertyTourAvailabilityUpdateDto,
  PropertyUtilitiesUpdateDto,
} from "../dtos/property.dto.js";
import { PropertySample } from "../samples/property.sample.js";
import PropertyService from "../services/property.service.js";
import {
  authenticateLessor,
  authenticateRenter,
  authenticateUser,
} from "../middlewares/auth.middleware.js";

const PropertyRoute = Utility.swaggerRouteToAppRoute({
  path: "property",
  controller: PropertyController,
  routes: [
    {
      route: `/initiate`,
      handler: PropertyController.initiatePropertyCreation,
      method: "post",
      middleWares: [authenticateUser],
      sampleRequestData: new PropertyInitiateDto({
        transactionType: TransactionTypes.LONG_TERM_RENTAL,
      }),
      description: `Use this to generate a property ID when starting the post a property process.`,
      sampleResponseData: Utility.responseFormatter(PropertySample.property, "Property initiated"),
    },
    {
      route: `/save/:propertyID`,
      handler: PropertyController.save,
      method: "put",
      middleWares: [authenticateUser],
      description: `Use this to save the info of a property using the property ID. Only set unitCategories if changes have been made from already existing units`,
      parameters: [
        {
          name: ":propertyID",
          in: "path",
          required: true,
          description: "fc158540-43dd-4a3b-a6a4-3f1ceaa2d03a",
        },
      ],
      sampleRequestData: PropertySample.update,
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/get/:propertyID`,
      handler: PropertyController.get,
      method: "get",
      description: `Use this to get the details of a property using the property ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },

    {
      route: `/:userId/:unitId/getUnitStatus`,
      handler: PropertyController.getUnitStatus,
      method: "get",
      middleWares: [authenticateUser],
      description: `This can be used to get the status of a unit by its ID`,
      parameters: [
        { name: ":userId", in: "path", required: true },
        { name: ":unitId", in: "path", required: true },
      ],
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/ammenity`,
      handler: PropertyController.updateAmmenity,
      method: "patch",
      middleWares: [authenticateUser],
      description: `This can be used to update the ammenities of a property`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: PropertySample.amenities,
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/unitCategories`,
      handler: PropertyController.updateUnitCategories,
      method: "put",
      middleWares: [authenticateUser],
      description: `This can be used to update the unit categories of a property. Only use this during the post a property phase. Once that step has been passed and the user is editing units, use the updateUnit endpoint`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: PropertySample.unitCategories,
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/units`,
      handler: PropertyController.updateUnits,
      method: "put",
      middleWares: [authenticateUser],
      description: `This can be used to update the units of a property`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: PropertySample.units,
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/update/:propertyID`,
      handlerName: "update",
      method: "put",
      middleWares: [authenticateUser],
      parameters: [{ name: ":propertyID", in: "path", required: true }],
    },
    {
      route: `/delete/:propertyID`,
      handlerName: "delete",
      method: "delete",
      middleWares: [authenticateUser],
      parameters: [{ name: ":propertyID", in: "path", required: true }],
    },
    // {
    //   route: `/search`,
    //   handlerName: "searchPartOne",
    //   method: "get",
    // },
    {
      route: `/types`,
      handlerName: "propertyTypes",
      method: "get",
    },
    {
      route: `/amenities`,
      handlerName: "uniqueAmenities",
      method: "get",
    },
    {
      route: `/:propertyID/amenities`,
      handlerName: "propAmenities",
      method: "get",
      parameters: [{ name: ":propertyID", in: "path", required: true }],
    },
    {
      route: `/:propertyID/combo`,
      handlerName: "propCombo",
      method: "get",
      description: "Use this to get combo details for a single property",
      parameters: [{ name: ":propertyID", in: "path", required: true }],
    },
    {
      route: `/location/:keyword?`,
      handlerName: "location",
      method: "get",
      description: "Use this to get locations",
      parameters: [{ name: ":keyword", in: "path", required: false }],
    },
    {
      // route: `/props`,
      handlerName: "props",
      route: `/:propertyID/isAddressUnique`,
      handler: PropertyController.isAddressUnique,
      method: "get",
      middleWares: [authenticateLessor],
      description: `This can be used to check if the address entered is unique or not`,
      parameters: [
        { name: ":propertyID", in: "path", required: true },
        { name: "address", in: "query", required: true },
      ],
      sampleResponseData: Utility.responseFormatter({ isUnique: true }),
    },
    {
      route: `/:propertyID/disable`,
      handler: PropertyController.disable,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to disable a property`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/enable`,
      handler: PropertyController.enable,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to enable a property`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/availability`,
      handler: PropertyController.updateAvailability,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to update the availability of a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: new PropertyAvailabilityUpdateDto(PropertySample.availability),
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/cautionFee`,
      handler: PropertyController.updateCautionFee,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to update the caution fees of a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: new PropertyCautionFeeUpdateDto(PropertySample.cautionFee),
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/faq`,
      handler: PropertyController.updateFAQ,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to update the FAQs of a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: new PropertyFAQDto({ faq: [PropertySample.faq] }),
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/archive`,
      handler: PropertyController.archive,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to set the archive status of a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: new PropertyArchiveUpdateDto({ isArchived: true }),
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/delete`,
      handler: PropertyController.delete,
      method: "delete",
      middleWares: [authenticateLessor],
      description: `This can be used to delete a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/leasePolicy`,
      handler: PropertyController.updateLeasePolicy,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to update the caution fees of a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: new PropertyLeasePolicyUpdateDto(PropertySample.leasePolicy),
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/tourAvailability`,
      handler: PropertyController.updateTourAvailability,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to update the tour availability of a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: new PropertyTourAvailabilityUpdateDto({
        daysAvailable: null,
        timeSlots: null,
      }),
    },
    {
      route: `/:propertyID/utilities`,
      handler: PropertyController.updateUtilities,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to update the utilities of a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleRequestData: new PropertyUtilitiesUpdateDto(PropertySample.utilities),
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    {
      route: `/:propertyID/finalize`,
      handler: PropertyController.finalizeProperty,
      method: "patch",
      middleWares: [authenticateLessor],
      description: `This can be used to finalize the creation of a property by its ID`,
      parameters: [{ name: ":propertyID", in: "path", required: true }],
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },

    {
      route: `/:userId/getPropertyByUserId`,
      handler: PropertyController.getPropertyByUserId,
      method: "get",
      middleWares: [authenticateLessor],
      description: `This can be used to get user that create a property by its ID`,
      parameters: [{ name: ":userId", in: "path", required: true }],
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },

    {
      route: `/:lessorId/getPropertyByLessorId`,
      handler: PropertyController.getPropertyByLessorId,
      method: "get",
      middleWares: [authenticateLessor],
      description: `This can be used to get user that create a property by its ID`,
      parameters: [{ name: ":userId", in: "path", required: true }],
      sampleResponseData: Utility.responseFormatter(PropertySample.property),
    },
    // {
    //   route: `/getUnitDetails`,
    //   handler: PropertyController.getUnitDetails,
    //   method: "get",
    //   middleWares: [authenticateRenter],
    //   description: `This can be used to get user Unit Details by using Unit ID`,
    // },
    {
      route: `/search`,
      handler: PropertyController.search,
      method: "get",
      description: `Use this to search for properties`,
      parameters: SearchService.structToQueryParams(PropertyService.searchPropertiesStruct),
      sampleResponseData: Utility.responseFormatter(PropertySample.search),
    },
    {
      route: `/updateMetadataForAll`,
      handler: PropertyController.updateMetadataForAll,
      method: "get",
      middleWares: [authenticateUser],
      description: `Use this to auto generate metadata for all properties`,
    },
    {
      route: `/amenities`,
      handler: PropertyController.getAmenities,
      method: "get",
      description: `Use this to get the generated amenities`,
    },
    {
      route: `/props`,
      handler: PropertyController.props,
      method: "get",
      description: `Use this to fetch the enums of the properties`,
      sampleResponseData: { data: propertyProps },
    },

    //getAllProperties
    {
      route: `/getAllProperties`,
      handler: PropertyController.getAllProperties,
      method: "get",
      description: `Use this to get all properties`,
      // parameters: SearchService.structToQueryParams(PropertyService.searchPropertiesStruct),
      // sampleResponseData: Utility.responseFormatter(PropertySample.search),
    },

    {
      route: `/myProperties`,
      handler: PropertyController.myProperties,
      method: "get",
      description: `Use this to search for properties created by a particular user`,
      parameters: SearchService.structToQueryParams(PropertyService.searchPropertiesStruct),
      sampleResponseData: Utility.responseFormatter(PropertySample.search),
      middleWares: [authenticateLessor],
    },

    {
      route: `/:propertyId/myProperties/fetchInterestedApplicants`,
      handler: PropertyController.fetchInterestedApplicants,
      method: "get",
      description: `Use this to get properties that have received applications`,
      sampleResponseData: Utility.responseFormatter({}),
      middleWares: [authenticateLessor],
      parameters: [{ name: ":propertyId", in: "path", required: true }],
    },
    {
      route: `/signLeaseAgreement`,
      handler: PropertyController.signLeaseAgreement,
      method: "post",
      description: `Use this to sign a lease agreement for a property`,
      middleWares: [authenticateRenter],
    },
    {
      route: `/withdrawRentalApplication`,
      handler: PropertyController.withdrawApplication,
      method: "post",
      description: `Use this to withdraw a rental application for a property by unit ID`,
      middleWares: [authenticateRenter],
      sampleRequestData: {
        unitId: "unit-id",
      },
    },
    //fetchApprovedProperties
    {
      route: `/fetchApprovedProperties`,
      handler: PropertyController.fetchApprovedProperties,
      method: "get",
      description: `Use this to fetch approved properties for a landlord`,
      middleWares: [authenticateLessor],
      sampleResponseData: Utility.responseFormatter([PropertySample.property]),
    },
    {
      route: `/:renterId/:unitId/landlordUnitStatus`,
      handler: PropertyController.landlordUnitStatus,
      method: "get",
      description: `Use this to get the status of a unit for a landlord`,
      middleWares: [authenticateLessor],
    },
    // {
    //   route: `/myProperties/receivedApplications`,
    //   handler: PropertyController.myReceivedApplicationProperties,
    //   method: "get",
    //   description: `Use this to get properties that have received applications`,
    //   sampleResponseData: Utility.responseFormatter({}),
    //   middleWares: [authenticateLessor],
    // },
    {
      route: `/:lessorUserId/myProperties/receivedApplication`,
      handler: PropertyController.myReceivedApplicationProperties,
      method: "get",
      description: `Use this to get properties that have received applications`,
      sampleResponseData: Utility.responseFormatter({}),
      middleWares: [authenticateLessor],
      parameters: [{ name: ":lessorUserId", in: "path", required: true }],
    },
    {
      route: `/myProperties/submittedApplications`,
      handler: PropertyController.mySubmittedApplications,
      method: "get",
      description: `Use this to get properties that a RENTER submit`,
      middleWares: [authenticateRenter],
    },
    {
      route: `/billingStructure/:propertyID/:unitID`,
      handler: PropertyController.billingStructure,
      method: "get",
      description: `Use this to get billing strructure for a property unit`,
      sampleResponseData: Utility.responseFormatter(PropertySample.billingAnalytics),
    },
    {
      route: `/myProperties/rentedUnits`,
      handler: PropertyController.rentedUnits,
      method: "get",
      description: `Use this to get all units rented by a RENTER`,
      middleWares: [authenticateRenter],
    },
  ],
});
export default PropertyRoute;
